package jp.co.futurenavigator.ptk.fw.mybatis.plugin;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.mybatis.generator.api.FullyQualifiedTable;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.IntrospectedTable.TargetRuntime;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

public class InsertReturnedIdPlugin extends PluginAdapter {

	private Map<FullyQualifiedTable, List<XmlElement>> elementsToAdd = new HashMap<FullyQualifiedTable, List<XmlElement>>();

	@Override
	public boolean validate(List<String> warnings) {
		// TODO 自動生成されたメソッド・スタブ
		return true;
	}

	//	@Override
	//	public boolean clientBasicInsertMethodGenerated(Method method, Interface interfaze,
	//			IntrospectedTable introspectedTable) {
	//		if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {
	//			copyAndAddMethod(method, interfaze);
	//		}
	//		return true;
	//	}

	@Override
	public boolean clientInsertMethodGenerated(Method method, Interface interfaze,
			IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {
			copyAndAddMethod(method, interfaze);
		}
		return true;
	}

	@Override
	public boolean clientInsertSelectiveMethodGenerated(Method method,
			Interface interfaze, IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {
			copyAndAddMethod(method, interfaze);
		}
		return true;
	}

	@Override
	public boolean sqlMapInsertElementGenerated(XmlElement element,
			IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {

			copyAndSaveElement(element, introspectedTable);
		}
		return true;
	}

	@Override
	public boolean sqlMapInsertSelectiveElementGenerated(XmlElement element,
			IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {
			copyAndSaveElement(element, introspectedTable);
		}
		return true;
	}

	/**
	* We'll override this method and add any new elements generated by
	* previous calls
	*/
	@Override
	public boolean sqlMapDocumentGenerated(Document document,
			IntrospectedTable introspectedTable) {
		List<XmlElement> elements = elementsToAdd.get(introspectedTable.getFullyQualifiedTable());
		if (elements != null) {
			for (XmlElement element : elements) {
				document.getRootElement().addElement(element);
			}
		}

		return true;
	}

	/**
	 * Use the method copy constructor to create a new method, then
	 * add the rowBounds parameter.
	 *
	 * @param fullyQualifiedTable the table
	 * @param method the method
	 */
	private void copyAndAddMethod(Method method, Interface interfaze) {
		Method newMethod = new Method(method);
		newMethod.setName(method.getName() + "ReturnedId"); //$NON-NLS-1$
		interfaze.addMethod(newMethod);
	}

	/**
	 * Use the method copy constructor to create a new element
	 *
	 * @param fullyQualifiedTable the table
	 * @param method the method
	 */
	private void copyAndSaveElement(XmlElement element, IntrospectedTable introspectedTable) {

		//テーブル名
		FullyQualifiedTable fqt = introspectedTable.getFullyQualifiedTable();

		//auto incrementカラム名
		String autoIncrementColumnName = "";
		for (IntrospectedColumn pkColumn : introspectedTable.getPrimaryKeyColumns()) {
			if (pkColumn.isAutoIncrement()) {
				autoIncrementColumnName = pkColumn.getJavaProperty();
			}
		}
		if (StringUtils.isNotEmpty(autoIncrementColumnName)) {

			XmlElement newElement = new XmlElement(element);

			// remove old id attribute and add a new one with the new name
			for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext();) {
				Attribute attribute = iterator.next();
				if ("id".equals(attribute.getName())) { //$NON-NLS-1$
					iterator.remove();
					Attribute newAttribute = new Attribute("id", attribute.getValue() + "ReturnedId"); //$NON-NLS-1$ //$NON-NLS-2$
					newElement.addAttribute(newAttribute);
					break;
				}
			}

			XmlElement selectKeyElement = new XmlElement("selectKey");
			selectKeyElement.addAttribute(new Attribute("resultType", "java.lang.Long"));
			selectKeyElement.addAttribute(new Attribute("keyProperty", autoIncrementColumnName));
			selectKeyElement.addAttribute(new Attribute("order", "AFTER"));
			selectKeyElement.addElement(new TextElement("select last_insert_id()"));
			newElement.addElement(selectKeyElement);

			// save the new element locally.   We'll add it to the document
			// later
			List<XmlElement> elements = elementsToAdd.get(fqt);
			if (elements == null) {
				elements = new ArrayList<XmlElement>();
				elementsToAdd.put(fqt, elements);
			}
			elements.add(newElement);
		}

	}

}
